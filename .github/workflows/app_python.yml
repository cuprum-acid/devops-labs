name: CI for app_python

on:
  push:
    paths:
      - 'app_python/**'
      - '.github/workflows/app_python.yml'
  pull_request:
    paths:
      - 'app_python/**'
      - '.github/workflows/app_python.yml'

defaults:
  run:
    working-directory: app_python

jobs:
  lint_and_format:
    timeout-minutes: 2
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint

      - name: Run code formatter (black)
        uses: psf/black@stable
        with:
          options: "--check --diff"
          src: "./app_python"

      - name: Run linter (pylint)
        run: pylint app.py --disable=R,C

  test:
    timeout-minutes: 2
    runs-on: ubuntu-22.04
    needs: lint_and_format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Run tests
        run: pytest test_app.py

  security_scan:
    timeout-minutes: 5
    runs-on: ubuntu-22.04
    needs: [lint_and_format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        with:
          args: --skip-unresolved app_python/
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


  docker_build_and_push:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    needs: [lint_and_format, test, security_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short commit hash
        id: commit
        run: echo "SHORT_COMMIT_HASH=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:app_python"
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/moscow-time:${{ env.SHORT_COMMIT_HASH }}
            ${{ secrets.DOCKERHUB_USERNAME }}/moscow-time:${{ env.SHORT_COMMIT_HASH }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=gha,type=registry,ref=ghcr.io/${{ github.repository_owner }}/moscow-time:buildcache
          cache-to: type=gha,mode=max,type=registry,ref=ghcr.io/${{ github.repository_owner }}/moscow-time:buildcache,mode=max
